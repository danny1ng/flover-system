/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./server/context"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: {};
  Product: { // root type
    count?: number | null; // Int
    id?: number | null; // Int
    name?: string | null; // String
    price?: number | null; // Int
  }
  Query: {};
  Sale: { // root type
    count?: number | null; // Int
    discount?: number | null; // Int
    id?: number | null; // Int
    note?: number | null; // Int
    summary?: number | null; // Int
  }
  Store: { // root type
    id?: number | null; // Int
    name?: string | null; // String
  }
  User: { // root type
    id?: number | null; // Float
    name?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Mutation: { // field return type
    createProduct: NexusGenRootTypes['Product'] | null; // Product
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Product: { // field return type
    count: number | null; // Int
    id: number | null; // Int
    name: string | null; // String
    price: number | null; // Int
    store: NexusGenRootTypes['Store'] | null; // Store
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    stores: Array<NexusGenRootTypes['Store'] | null> | null; // [Store]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Sale: { // field return type
    count: number | null; // Int
    discount: number | null; // Int
    id: number | null; // Int
    note: number | null; // Int
    summary: number | null; // Int
    users: NexusGenRootTypes['User'] | null; // User
  }
  Store: { // field return type
    id: number | null; // Int
    name: string | null; // String
    products: Array<NexusGenRootTypes['Product'] | null> | null; // [Product]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    id: number | null; // Float
    name: string | null; // String
    stores: Array<NexusGenRootTypes['Store'] | null> | null; // [Store]
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createProduct: { // args
      count?: number | null; // Int
      name: string; // String!
      price: number; // Int!
      storeId: number; // Int!
    }
    login: { // args
      name: string; // String!
      password: string; // String!
    }
  }
  Query: {
    products: { // args
      storeId: number; // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Mutation" | "Product" | "Query" | "Sale" | "Store" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}