### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

scalar DateTime

type Deduction {
  id: Int!
  message: String!
  store: Store
  summary: Int!
}

type IncomingGood {
  count: Float!
  createdAt: DateTime!
  id: Int!
  name: String!
  note: String
  price: Int!
  store: Store
}

type Mutation {
  addDeduction(message: String!, storeId: Int!, summary: Int!): Deduction
  addIncomingGood(count: Int!, name: String, note: String, price: Int, productId: Int, storeId: Int!): IncomingGood
  addProduct(count: Int, name: String!, price: Int!, storeId: Int!): Product
  addSale(count: Int!, discount: Int, note: String, payType: PayType, productId: Int!, storeId: Int!): Sale
  addWriteOff(count: Int!, note: String, productId: Int!, storeId: Int!): WriteOff
  deleteProduct(productId: Int!): Product
  editProduct(count: Int, name: String, price: Int, productId: Int!): Product
  login(name: String!, password: String!): AuthPayload
  signup(name: String, password: String!): AuthPayload
}

enum PayType {
  CASH
  WIRE
}

type Product {
  count: Float!
  id: Int!
  name: String!
  price: Int!
  store: Store
}

type Query {
  deductions(storeId: Int!): [Deduction]
  incomingGoods(storeId: Int!): [IncomingGood]
  me: User
  product(productId: Int!): Product
  products(storeId: Int!): [Product]
  sales(storeId: Int!): [Sale]
  store(storeId: Int!): Store
  stores: [Store]
  writeOffs(storeId: Int!): [WriteOff]
}

enum Role {
  ADMIN
  SELLER
}

type Sale {
  count: Int!
  createdAt: DateTime!
  discount: Int!
  id: Int!
  name: String!
  note: String
  payType: PayType!
  price: Int!
  store: Store
  summary: Int!
}

type Store {
  balance: Int!
  id: Int!
  name: String!
  products: [Product]
  users: [User]
}

type User {
  id: Int!
  name: String!
  role: Role!
  stores: [Store]
}

type WriteOff {
  count: Float!
  createdAt: DateTime!
  id: Int!
  name: String!
  note: String
  store: Store
}
